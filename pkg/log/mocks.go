// Code generated by MockGen. DO NOT EDIT.
// Source: ./contracts.go

// Package log is a generated GoMock package.
package log

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockProvider) Debug(ctx context.Context, title string, valueMaps ...Body) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, title}
	for _, a := range valueMaps {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockProviderMockRecorder) Debug(ctx, title interface{}, valueMaps ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, title}, valueMaps...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockProvider)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockProvider) Error(ctx context.Context, title string, valueMaps ...Body) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, title}
	for _, a := range valueMaps {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockProviderMockRecorder) Error(ctx, title interface{}, valueMaps ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, title}, valueMaps...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockProvider)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockProvider) Fatal(ctx context.Context, title string, valueMaps ...Body) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, title}
	for _, a := range valueMaps {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockProviderMockRecorder) Fatal(ctx, title interface{}, valueMaps ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, title}, valueMaps...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockProvider)(nil).Fatal), varargs...)
}

// Info mocks base method.
func (m *MockProvider) Info(ctx context.Context, title string, valueMaps ...Body) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, title}
	for _, a := range valueMaps {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockProviderMockRecorder) Info(ctx, title interface{}, valueMaps ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, title}, valueMaps...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockProvider)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockProvider) Warn(ctx context.Context, title string, valueMaps ...Body) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, title}
	for _, a := range valueMaps {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockProviderMockRecorder) Warn(ctx, title interface{}, valueMaps ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, title}, valueMaps...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockProvider)(nil).Warn), varargs...)
}
