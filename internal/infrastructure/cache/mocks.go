// Code generated by MockGen. DO NOT EDIT.
// Source: ./contracts.go

// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetArray mocks base method.
func (m *MockProvider) GetArray(ctx context.Context, key string) []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArray", ctx, key)
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// GetArray indicates an expected call of GetArray.
func (mr *MockProviderMockRecorder) GetArray(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArray", reflect.TypeOf((*MockProvider)(nil).GetArray), ctx, key)
}

// GetInt mocks base method.
func (m *MockProvider) GetInt(ctx context.Context, key string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", ctx, key)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInt indicates an expected call of GetInt.
func (mr *MockProviderMockRecorder) GetInt(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockProvider)(nil).GetInt), ctx, key)
}

// GetMap mocks base method.
func (m *MockProvider) GetMap(ctx context.Context, key string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMap", ctx, key)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetMap indicates an expected call of GetMap.
func (mr *MockProviderMockRecorder) GetMap(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMap", reflect.TypeOf((*MockProvider)(nil).GetMap), ctx, key)
}

// SetArray mocks base method.
func (m *MockProvider) SetArray(ctx context.Context, key string, value []interface{}, ttl int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetArray", ctx, key, value, ttl)
}

// SetArray indicates an expected call of SetArray.
func (mr *MockProviderMockRecorder) SetArray(ctx, key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArray", reflect.TypeOf((*MockProvider)(nil).SetArray), ctx, key, value, ttl)
}

// SetInt mocks base method.
func (m *MockProvider) SetInt(ctx context.Context, key string, value, ttl int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInt", ctx, key, value, ttl)
}

// SetInt indicates an expected call of SetInt.
func (mr *MockProviderMockRecorder) SetInt(ctx, key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInt", reflect.TypeOf((*MockProvider)(nil).SetInt), ctx, key, value, ttl)
}

// SetMap mocks base method.
func (m *MockProvider) SetMap(ctx context.Context, key string, value map[string]string, ttl int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMap", ctx, key, value, ttl)
}

// SetMap indicates an expected call of SetMap.
func (mr *MockProviderMockRecorder) SetMap(ctx, key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMap", reflect.TypeOf((*MockProvider)(nil).SetMap), ctx, key, value, ttl)
}
