// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/caregiver.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CaregiverServiceClient is the client API for CaregiverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaregiverServiceClient interface {
	Create(ctx context.Context, in *CreateCaregiverRequest, opts ...grpc.CallOption) (*Caregiver, error)
	FindById(ctx context.Context, in *FindCaregiverByIDRequest, opts ...grpc.CallOption) (*CaregiverFull, error)
	Update(ctx context.Context, in *UpdateCaregiverRequest, opts ...grpc.CallOption) (*Blank, error)
	Delete(ctx context.Context, in *DeleteCaregiverRequest, opts ...grpc.CallOption) (*Blank, error)
	AddNewPatient(ctx context.Context, in *AddPatientRequest, opts ...grpc.CallOption) (*CaregiverFull, error)
	LinkPatientDevice(ctx context.Context, in *LinkPatientDeviceRequest, opts ...grpc.CallOption) (*Blank, error)
}

type caregiverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaregiverServiceClient(cc grpc.ClientConnInterface) CaregiverServiceClient {
	return &caregiverServiceClient{cc}
}

func (c *caregiverServiceClient) Create(ctx context.Context, in *CreateCaregiverRequest, opts ...grpc.CallOption) (*Caregiver, error) {
	out := new(Caregiver)
	err := c.cc.Invoke(ctx, "/pb.CaregiverService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caregiverServiceClient) FindById(ctx context.Context, in *FindCaregiverByIDRequest, opts ...grpc.CallOption) (*CaregiverFull, error) {
	out := new(CaregiverFull)
	err := c.cc.Invoke(ctx, "/pb.CaregiverService/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caregiverServiceClient) Update(ctx context.Context, in *UpdateCaregiverRequest, opts ...grpc.CallOption) (*Blank, error) {
	out := new(Blank)
	err := c.cc.Invoke(ctx, "/pb.CaregiverService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caregiverServiceClient) Delete(ctx context.Context, in *DeleteCaregiverRequest, opts ...grpc.CallOption) (*Blank, error) {
	out := new(Blank)
	err := c.cc.Invoke(ctx, "/pb.CaregiverService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caregiverServiceClient) AddNewPatient(ctx context.Context, in *AddPatientRequest, opts ...grpc.CallOption) (*CaregiverFull, error) {
	out := new(CaregiverFull)
	err := c.cc.Invoke(ctx, "/pb.CaregiverService/AddNewPatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caregiverServiceClient) LinkPatientDevice(ctx context.Context, in *LinkPatientDeviceRequest, opts ...grpc.CallOption) (*Blank, error) {
	out := new(Blank)
	err := c.cc.Invoke(ctx, "/pb.CaregiverService/LinkPatientDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaregiverServiceServer is the server API for CaregiverService service.
// All implementations must embed UnimplementedCaregiverServiceServer
// for forward compatibility
type CaregiverServiceServer interface {
	Create(context.Context, *CreateCaregiverRequest) (*Caregiver, error)
	FindById(context.Context, *FindCaregiverByIDRequest) (*CaregiverFull, error)
	Update(context.Context, *UpdateCaregiverRequest) (*Blank, error)
	Delete(context.Context, *DeleteCaregiverRequest) (*Blank, error)
	AddNewPatient(context.Context, *AddPatientRequest) (*CaregiverFull, error)
	LinkPatientDevice(context.Context, *LinkPatientDeviceRequest) (*Blank, error)
	mustEmbedUnimplementedCaregiverServiceServer()
}

// UnimplementedCaregiverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCaregiverServiceServer struct {
}

func (UnimplementedCaregiverServiceServer) Create(context.Context, *CreateCaregiverRequest) (*Caregiver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCaregiverServiceServer) FindById(context.Context, *FindCaregiverByIDRequest) (*CaregiverFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedCaregiverServiceServer) Update(context.Context, *UpdateCaregiverRequest) (*Blank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCaregiverServiceServer) Delete(context.Context, *DeleteCaregiverRequest) (*Blank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCaregiverServiceServer) AddNewPatient(context.Context, *AddPatientRequest) (*CaregiverFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewPatient not implemented")
}
func (UnimplementedCaregiverServiceServer) LinkPatientDevice(context.Context, *LinkPatientDeviceRequest) (*Blank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkPatientDevice not implemented")
}
func (UnimplementedCaregiverServiceServer) mustEmbedUnimplementedCaregiverServiceServer() {}

// UnsafeCaregiverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaregiverServiceServer will
// result in compilation errors.
type UnsafeCaregiverServiceServer interface {
	mustEmbedUnimplementedCaregiverServiceServer()
}

func RegisterCaregiverServiceServer(s grpc.ServiceRegistrar, srv CaregiverServiceServer) {
	s.RegisterService(&CaregiverService_ServiceDesc, srv)
}

func _CaregiverService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCaregiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaregiverServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CaregiverService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaregiverServiceServer).Create(ctx, req.(*CreateCaregiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaregiverService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCaregiverByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaregiverServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CaregiverService/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaregiverServiceServer).FindById(ctx, req.(*FindCaregiverByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaregiverService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCaregiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaregiverServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CaregiverService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaregiverServiceServer).Update(ctx, req.(*UpdateCaregiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaregiverService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCaregiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaregiverServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CaregiverService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaregiverServiceServer).Delete(ctx, req.(*DeleteCaregiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaregiverService_AddNewPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaregiverServiceServer).AddNewPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CaregiverService/AddNewPatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaregiverServiceServer).AddNewPatient(ctx, req.(*AddPatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaregiverService_LinkPatientDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkPatientDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaregiverServiceServer).LinkPatientDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CaregiverService/LinkPatientDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaregiverServiceServer).LinkPatientDevice(ctx, req.(*LinkPatientDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaregiverService_ServiceDesc is the grpc.ServiceDesc for CaregiverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaregiverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CaregiverService",
	HandlerType: (*CaregiverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CaregiverService_Create_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _CaregiverService_FindById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CaregiverService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CaregiverService_Delete_Handler,
		},
		{
			MethodName: "AddNewPatient",
			Handler:    _CaregiverService_AddNewPatient_Handler,
		},
		{
			MethodName: "LinkPatientDevice",
			Handler:    _CaregiverService_LinkPatientDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/caregiver.proto",
}
