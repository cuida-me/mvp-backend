// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/medication.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MedicationServiceClient is the client API for MedicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedicationServiceClient interface {
	Create(ctx context.Context, in *CreateMedicationRequest, opts ...grpc.CallOption) (*Medication, error)
	Update(ctx context.Context, in *UpdateMedicationRequest, opts ...grpc.CallOption) (*Medication, error)
	Delete(ctx context.Context, in *DeleteMedicationRequest, opts ...grpc.CallOption) (*Medication, error)
	FindByID(ctx context.Context, in *FindMedicationRequest, opts ...grpc.CallOption) (*Medication, error)
}

type medicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicationServiceClient(cc grpc.ClientConnInterface) MedicationServiceClient {
	return &medicationServiceClient{cc}
}

func (c *medicationServiceClient) Create(ctx context.Context, in *CreateMedicationRequest, opts ...grpc.CallOption) (*Medication, error) {
	out := new(Medication)
	err := c.cc.Invoke(ctx, "/pb.MedicationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicationServiceClient) Update(ctx context.Context, in *UpdateMedicationRequest, opts ...grpc.CallOption) (*Medication, error) {
	out := new(Medication)
	err := c.cc.Invoke(ctx, "/pb.MedicationService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicationServiceClient) Delete(ctx context.Context, in *DeleteMedicationRequest, opts ...grpc.CallOption) (*Medication, error) {
	out := new(Medication)
	err := c.cc.Invoke(ctx, "/pb.MedicationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicationServiceClient) FindByID(ctx context.Context, in *FindMedicationRequest, opts ...grpc.CallOption) (*Medication, error) {
	out := new(Medication)
	err := c.cc.Invoke(ctx, "/pb.MedicationService/FindByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicationServiceServer is the server API for MedicationService service.
// All implementations must embed UnimplementedMedicationServiceServer
// for forward compatibility
type MedicationServiceServer interface {
	Create(context.Context, *CreateMedicationRequest) (*Medication, error)
	Update(context.Context, *UpdateMedicationRequest) (*Medication, error)
	Delete(context.Context, *DeleteMedicationRequest) (*Medication, error)
	FindByID(context.Context, *FindMedicationRequest) (*Medication, error)
	mustEmbedUnimplementedMedicationServiceServer()
}

// UnimplementedMedicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMedicationServiceServer struct {
}

func (UnimplementedMedicationServiceServer) Create(context.Context, *CreateMedicationRequest) (*Medication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMedicationServiceServer) Update(context.Context, *UpdateMedicationRequest) (*Medication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMedicationServiceServer) Delete(context.Context, *DeleteMedicationRequest) (*Medication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMedicationServiceServer) FindByID(context.Context, *FindMedicationRequest) (*Medication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedMedicationServiceServer) mustEmbedUnimplementedMedicationServiceServer() {}

// UnsafeMedicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicationServiceServer will
// result in compilation errors.
type UnsafeMedicationServiceServer interface {
	mustEmbedUnimplementedMedicationServiceServer()
}

func RegisterMedicationServiceServer(s grpc.ServiceRegistrar, srv MedicationServiceServer) {
	s.RegisterService(&MedicationService_ServiceDesc, srv)
}

func _MedicationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MedicationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicationServiceServer).Create(ctx, req.(*CreateMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MedicationService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicationServiceServer).Update(ctx, req.(*UpdateMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MedicationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicationServiceServer).Delete(ctx, req.(*DeleteMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicationService_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicationServiceServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MedicationService/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicationServiceServer).FindByID(ctx, req.(*FindMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedicationService_ServiceDesc is the grpc.ServiceDesc for MedicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MedicationService",
	HandlerType: (*MedicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MedicationService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MedicationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MedicationService_Delete_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _MedicationService_FindByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/medication.proto",
}
