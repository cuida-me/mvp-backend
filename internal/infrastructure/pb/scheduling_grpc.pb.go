// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/scheduling.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchedulingServiceClient is the client API for SchedulingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulingServiceClient interface {
	DoneScheduling(ctx context.Context, in *DoneSchedulingRequest, opts ...grpc.CallOption) (*DoneSchedulingRequest, error)
	GetNextScheduling(ctx context.Context, in *GetNextSchedulingRequest, opts ...grpc.CallOption) (*NextScheduling, error)
}

type schedulingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulingServiceClient(cc grpc.ClientConnInterface) SchedulingServiceClient {
	return &schedulingServiceClient{cc}
}

func (c *schedulingServiceClient) DoneScheduling(ctx context.Context, in *DoneSchedulingRequest, opts ...grpc.CallOption) (*DoneSchedulingRequest, error) {
	out := new(DoneSchedulingRequest)
	err := c.cc.Invoke(ctx, "/pb.SchedulingService/DoneScheduling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) GetNextScheduling(ctx context.Context, in *GetNextSchedulingRequest, opts ...grpc.CallOption) (*NextScheduling, error) {
	out := new(NextScheduling)
	err := c.cc.Invoke(ctx, "/pb.SchedulingService/GetNextScheduling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulingServiceServer is the server API for SchedulingService service.
// All implementations must embed UnimplementedSchedulingServiceServer
// for forward compatibility
type SchedulingServiceServer interface {
	DoneScheduling(context.Context, *DoneSchedulingRequest) (*DoneSchedulingRequest, error)
	GetNextScheduling(context.Context, *GetNextSchedulingRequest) (*NextScheduling, error)
	mustEmbedUnimplementedSchedulingServiceServer()
}

// UnimplementedSchedulingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulingServiceServer struct {
}

func (UnimplementedSchedulingServiceServer) DoneScheduling(context.Context, *DoneSchedulingRequest) (*DoneSchedulingRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoneScheduling not implemented")
}
func (UnimplementedSchedulingServiceServer) GetNextScheduling(context.Context, *GetNextSchedulingRequest) (*NextScheduling, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextScheduling not implemented")
}
func (UnimplementedSchedulingServiceServer) mustEmbedUnimplementedSchedulingServiceServer() {}

// UnsafeSchedulingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulingServiceServer will
// result in compilation errors.
type UnsafeSchedulingServiceServer interface {
	mustEmbedUnimplementedSchedulingServiceServer()
}

func RegisterSchedulingServiceServer(s grpc.ServiceRegistrar, srv SchedulingServiceServer) {
	s.RegisterService(&SchedulingService_ServiceDesc, srv)
}

func _SchedulingService_DoneScheduling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoneSchedulingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).DoneScheduling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SchedulingService/DoneScheduling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).DoneScheduling(ctx, req.(*DoneSchedulingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_GetNextScheduling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextSchedulingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).GetNextScheduling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SchedulingService/GetNextScheduling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).GetNextScheduling(ctx, req.(*GetNextSchedulingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchedulingService_ServiceDesc is the grpc.ServiceDesc for SchedulingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SchedulingService",
	HandlerType: (*SchedulingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoneScheduling",
			Handler:    _SchedulingService_DoneScheduling_Handler,
		},
		{
			MethodName: "GetNextScheduling",
			Handler:    _SchedulingService_GetNextScheduling_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scheduling.proto",
}
